[preprocess]
# ==========================================================================
# Related file: preprocess.py
# Please check and customize configurations before you run the related file
# ==========================================================================

# directory having raw Youtube video files
src_vid_dir = /hdd/Video
# directory having raw audio files from corresponding video in src_vid_dir
src_aud_dir = /hdd/Audio

# directory to have extracted video frames in npz format (e.g. video_id.npz)
dst_vid_dir = /hdd/data/video
# directory to have extracted spectorgrams in npz format (e.g. audio_id.npz)
dst_aud_dir = /hdd/data/audio

# extension of raw video files in src_vid_dir
vid_ext = mp4
# extension of raw audio files in src_aud_dir
aud_ext = wav

# file head name convention of raw video files in src_vid_dir
# the name of video file finally must be like: "<vid_fname_head><vid_id>.<vid_ext>"
# <vid_id> here means video ID in Youtube, this is given automatically from Youtube
# naming convention of video files should have been set before you download videos from Youtube via youtube_dl
vid_fname_head = video_
# file head name convention of raw audio files in src_aud_dir
# the name of audio file finally must be like: "<aud_fname_head><aud_id>.<aud_ext>"
# <aud_id> here means video ID in Youtube, this is given automatically from Youtube
# naming convention of audio files should have been set before you retrieve audio from video files via ffmpeg
aud_fname_head = audio_

# number of processes to be run in parallel for extraction
ncpu = 8
# whether to run video frame extraction or not
# you can set this to False or false if you already have preprocessed audio spectrograms in npz format
# only True, true, False, false will be accepted, error will be raised otherwise.
run_vid = True
# whether to run audio spectrogram extraction or not
# you can set this to False or false if you already have preprocessed video files in npz format
# only True, true, False, false will be accepted, error will be raised otherwise.
run_aud = True
# file path where <vid_id> and <aud_id> failed on extraction will be saved
fail_fname = csv/preprocess_fail.csv

# =====================================================================================================
# Note: preprocess configurations from below are recommended not to be changed.
# Please change configurations below only if you are familiar with preprocessing steps in this project.
# =====================================================================================================

# number of time position (in second) where the extraction starts
start_pos = 0
# number of time interval (in second) to create one segment
interval = 1
# number of segments to extract per file
# the time length of video and audio files should be checked if time_length >= start_pos + interval * nseg
# check will be automatically done by assert()
nseg = 9

# sampling rate of audio files
sr = 48000
# windows size to be used in Fourier transformation
# default value is 480, which is 0.01s window size when sampling rate is 48kHz)
winsize = 480
# ratio of overlapping in the window
# default value is the half of window size, which is 240 when using default winsize
overlap = 0.5
# nfft value to be used for generating spectorgram
# default value is the nearst power of two of winsize, which is 512
nfft = 512
# if True, convert spectrogram into log-scale (magnitude to decibel unit)
# only True, true, False, false will be accepted, error will be raised otherwise.
logscale = True
# a small value to be added before changing the spectrogram into log-scale to prevent zero log
# if logscale is True, spectrogram will be converted into log-scale by: 10 * log(spectrogram + eps)
eps = 1e-7


[train]
# related file: train.py
# please check and customize configurations before you run the related file

